#include <bits/stdc++.h>
using namespace std;struct Interval{Interval (unsigned long long int a, unsigned long long int b, unsigned long long int c ){this->start = a;this->end = b;this->count = c;}unsigned long long int start;unsigned long long int end;unsigned long long int count;};bool isLess(Interval a, Interval b){return a.start < b.start;}bool isLower(pair<unsigned long long int,unsigned long long int> a, pair<unsigned long long int,unsigned long long int> b){return a.first < b.first;}pair<unsigned long long int,unsigned long long int> IntervalIndex(const vector<Interval>& Intervals, unsigned long long int startindex, unsigned long long int currentstop ){unsigned long long int passengercount = 0;unsigned long long int index = startindex;for(unsigned long long int i = startindex; i < Intervals.size(); i++){if(Intervals[i].start <= currentstop && Intervals[i].end > currentstop){passengercount+= Intervals[i].count;}else if(Intervals[i].start > currentstop){index = i;return make_pair(passengercount,index);}}return make_pair(passengercount,Intervals.size());}int main() {unsigned long long int R;unsigned long long int S;unsigned long long int F;cin >> R >> S >> F;vector<Interval> Intervals; unsigned long long int a,b,c;for (unsigned long long int i = 0; i < F; i++){cin >> a >> b >> c;Intervals.emplace_back(a,b,c);}if(R >= (S-1)){unsigned long long int passengercount = 0;for(unsigned long long int i = 0; i < F; i++){passengercount += Intervals[i].count;}cout << passengercount << endl;for (unsigned long long int i = 0; i < (S-1) ; i++){cout<< "[" << i << ";" << i +1 << "]"; if(i < ((S-1)-1) ){cout << ",";}}return 0;}sort(Intervals.begin(), Intervals.end(), isLess);vector<pair<unsigned long long int, unsigned long long int>> singles(S);for(unsigned long long int i = 0; i < (S-1); i++ ) {pair<unsigned long long int, unsigned long long int> currpass = IntervalIndex(Intervals, 0, i);singles[i] = currpass;}vector<vector<unsigned long long int>  > doubles(S,vector<unsigned long long int> (S));for(unsigned long long int i = 0; i < (S-1); i++ ) {vector<pair<unsigned long long int,unsigned long long int>> entry;vector<pair<unsigned long long int,unsigned long long int>> exit;for(unsigned long long int j = singles[i].second; j < F; j++ ) {entry.emplace_back(Intervals[j].start,Intervals[j].count);exit.emplace_back(Intervals[j].end,Intervals[j].count);}sort(exit.begin(), exit.end(), isLower);unsigned long long int currsum = 0;unsigned long long int entryindex = 0;unsigned long long int exitindex = 0;unsigned long long int dpindex = i;while(entryindex < entry.size() || exitindex < exit.size()){while(entryindex < entry.size() && entry[entryindex].first <= dpindex){currsum += entry[entryindex].second;entryindex++;}while(exitindex < exit.size() && exit[exitindex].first <= dpindex){currsum -= exit[exitindex].second; exitindex++;}doubles[dpindex][i] = currsum; dpindex++;}}vector<vector<unsigned long long int>  > dp(R,vector<unsigned long long int> (S));vector<vector<unsigned long long int>  > dppos(R,vector<unsigned long long int> (S));for(unsigned long long int i = 0; i < R; i++){ /*for each controller*/for(unsigned long long int j = i; j < ((S)-(R-i)); j++ ){ /*for each position of current controller*/if(i == 0){dp[i][j] = singles[j].first;}else {for (unsigned long long int k = (i-1); k < j; k++) { /*for all positions of previous controller*/if ((doubles[j][k] + dp[i - 1][k]) >= dp[i][j]) {dp[i][j] = doubles[j][k] + dp[i - 1][k];dppos[i][j] = k;dppos[i][0] = i;}}}}}unsigned long long int biggestcount = 0; unsigned long long int bestpos = 0;for (unsigned long long int i = 0; i < S ; i++){if(dp[R-1][i] >= biggestcount){biggestcount = dp[R-1][i];bestpos = i;}}cout << biggestcount << endl;unsigned long long int contindex = R;vector<unsigned long long int> bestposs;while(contindex > 0){bestposs.push_back(bestpos);bestpos = dppos[contindex-1][bestpos];contindex--;}reverse(bestposs.begin(), bestposs.end());for (unsigned long long int i = 0; i < bestposs.size() ; i++){cout<< "[" << bestposs[i] << ";" << bestposs[i] +1 << "]"; if(i < bestposs.size()-1){cout << ",";}}return 0;}